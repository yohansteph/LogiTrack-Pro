/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.sliit.fasttrack_logistics.Views;

import com.sliit.fasttrack_logistics.Services.ShipmentProgressService;
import com.sliit.fasttrack_logistics.models.ShipmentProgress;


import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;

/**
 *
 * @author ASUS
 */
public class ShipmentProgressForm extends javax.swing.JFrame {

    ShipmentProgressService service = new ShipmentProgressService();

    /**
     * Creates new form ShipmentProgressForm
     */
    public ShipmentProgressForm() {
        initComponents();
        loadShipmentTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtProgressId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtShipmentId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCurrentLocation = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEstimatedDeliveryTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShipmentProgress = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Shipment Progress ID");

        jLabel2.setText("Shipment ID");

        jLabel3.setText("Current Location");

        jLabel4.setText("Estimated Delivery Timeyyyy-MM-dd HH:mm:ss");

        jLabel5.setText("Status");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        tblShipmentProgress.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Shipment Progress ID", "Shipment ID", "Current Location", "Estimated Delivery Time", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblShipmentProgress);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(38, 38, 38)
                        .addComponent(btnUpdate)
                        .addGap(28, 28, 28)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEstimatedDeliveryTime)
                            .addComponent(txtStatus)
                            .addComponent(txtProgressId, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtShipmentId)
                            .addComponent(txtCurrentLocation))))
                .addGap(147, 147, 147))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProgressId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtShipmentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCurrentLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEstimatedDeliveryTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        add();        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        update();        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        delete();        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShipmentProgressForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShipmentProgressForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShipmentProgressForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShipmentProgressForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShipmentProgressForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblShipmentProgress;
    private javax.swing.JTextField txtCurrentLocation;
    private javax.swing.JTextField txtEstimatedDeliveryTime;
    private javax.swing.JTextField txtProgressId;
    private javax.swing.JTextField txtShipmentId;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    private void add() {
        try {
            int shipmentId = Integer.parseInt(txtShipmentId.getText());
            String currentLocation = txtCurrentLocation.getText();
            String estimatedDeliveryTimeStr = txtEstimatedDeliveryTime.getText();
            String status = txtStatus.getText();

            // Parse estimated delivery time string to Timestamp
            Timestamp estimatedDeliveryTime = parseTimestamp(estimatedDeliveryTimeStr);
            if (estimatedDeliveryTime == null) {
                JOptionPane.showMessageDialog(this, "Invalid Estimated Delivery Time format. Use yyyy-MM-dd HH:mm:ss");
                return;
            }

            ShipmentProgress sp = new ShipmentProgress();
            sp.setShipmentId(shipmentId);
            sp.setCurrentLocation(currentLocation);
            sp.setEstimatedDeliveryTime(estimatedDeliveryTime);
            sp.setStatus(status);

            boolean result = service.addShipmentProgress(sp);

            if (result) {
                JOptionPane.showMessageDialog(this, "Shipment progress added successfully.");
                clear();
                loadShipmentTable();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add shipment progress.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Shipment ID must be an integer.");
        }
    }

    // Update shipment progress record
    private void update() {
        try {
            int progressId = Integer.parseInt(txtProgressId.getText());
            int shipmentId = Integer.parseInt(txtShipmentId.getText());
            String currentLocation = txtCurrentLocation.getText();
            String estimatedDeliveryTimeStr = txtEstimatedDeliveryTime.getText();
            String status = txtStatus.getText();

            Timestamp estimatedDeliveryTime = parseTimestamp(estimatedDeliveryTimeStr);
            if (estimatedDeliveryTime == null) {
                JOptionPane.showMessageDialog(this, "Invalid Estimated Delivery Time format. Use yyyy-MM-dd HH:mm:ss");
                return;
            }

            ShipmentProgress sp = new ShipmentProgress();
            sp.setId(progressId);
            sp.setShipmentId(shipmentId);
            sp.setCurrentLocation(currentLocation);
            sp.setEstimatedDeliveryTime(estimatedDeliveryTime);
            sp.setStatus(status);

            boolean result = service.updateShipmentProgress(sp);

            if (result) {
                JOptionPane.showMessageDialog(this, "Shipment progress updated successfully.");
                clear();
                loadShipmentTable();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update shipment progress.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Shipment Progress ID and Shipment ID must be integers.");
        }
    }

    // Delete shipment progress record
    private void delete() {
        try {
            int progressId = Integer.parseInt(txtProgressId.getText());

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this shipment progress?",
                    "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                boolean result = service.deleteShipmentProgress(progressId);

                if (result) {
                    JOptionPane.showMessageDialog(this, "Shipment progress deleted successfully.");
                    clear();
                    loadShipmentTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete shipment progress.");
                }
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Shipment Progress ID must be an integer.");
        }
    }

    // Load shipment progress data into the JTable
    private void loadShipmentTable() {
        try {
            List<ShipmentProgress> progressList = service.getAllShipmentProgress(); // <-- use instance method here!
            DefaultTableModel model = (DefaultTableModel) tblShipmentProgress.getModel();
            model.setRowCount(0);  // Clear existing rows

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            for (ShipmentProgress sp : progressList) {
                Object[] row = new Object[]{
                    sp.getId(),
                    sp.getShipmentId(),
                    sp.getCurrentLocation(),
                    sp.getEstimatedDeliveryTime() != null ? sdf.format(sp.getEstimatedDeliveryTime()) : "",
                    sp.getStatus()
                };
                model.addRow(row);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading shipment progress data: " + ex.getMessage());
        }
    }

    // Helper method to parse timestamp from string
    private Timestamp parseTimestamp(String datetimeStr) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            long time = dateFormat.parse(datetimeStr).getTime();
            return new Timestamp(time);
        } catch (ParseException e) {
            return null;
        }
    }

    // Clear form fields
    private void clear() {
        txtProgressId.setText("");
        txtShipmentId.setText("");
        txtCurrentLocation.setText("");
        txtEstimatedDeliveryTime.setText("");
        txtStatus.setText("");
    }

    // You would call these methods from your button action listeners accordingly
}
